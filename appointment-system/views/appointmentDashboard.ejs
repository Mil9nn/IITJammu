<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold text-gray-800">Dashboard: <%= adminName %></h1>
      <a href="/auth/logout" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
        Logout
      </a>
    </div>
    
    <div class="bg-white shadow-md rounded-lg overflow-hidden">
      <div class="p-4 bg-blue-500 text-white flex justify-between items-center">
        <h2 class="text-xl font-semibold">Your Appointments</h2>
        <span class="bg-blue-700 px-3 py-1 rounded-full text-sm"><%= appointments.length %> Total</span>
      </div>
      
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date & Time</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notification</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% appointments.forEach(appointment => { %>
            <% 
              const formattedDate = new Date(appointment.date).toLocaleDateString('en-US', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });
              
              // Generate status badge
              let statusBadge = '';
              switch (appointment.status) {
                case 'pending':
                  statusBadge = `<span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">Pending</span>`;
                  break;
                case 'confirmed':
                  statusBadge = `<span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Confirmed</span>`;
                  break;
                case 'rejected':
                  statusBadge = `<span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">Rejected</span>`;
                  break;
                case 'waiting':
                  statusBadge = `<span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">Waiting</span>`;
                  break;
                default:
                  statusBadge = `<span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">${appointment.status}</span>`;
              }

              // Notification status
              let notificationStatus = 'N/A';
              if (
                ['confirmed', 'rejected', 'waiting'].includes(appointment.status) &&
                appointment.notificationsSent &&
                appointment.notificationsSent[appointment.status]
              ) {
                notificationStatus = `<span class="text-green-600">âœ“ Sent</span>`;
              } else if (['confirmed', 'rejected', 'waiting'].includes(appointment.status)) {
                notificationStatus = `<span class="text-red-600">Not Sent</span>`;
              }
              
              // Check if appointment is assigned or not
              const isAssigned = appointment.assignedAdmin ? true : false;
            %>
            <tr class="<%= isAssigned ? '' : 'bg-yellow-50' %>">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div>
                    <div class="text-sm font-medium text-gray-900"><%= appointment.name %></div>
                    <div class="text-sm text-gray-500"><%= appointment.email %></div>
                    <div class="text-sm text-gray-500"><%= appointment.phone %></div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900"><%= formattedDate %></div>
                <div class="text-sm text-gray-500"><%= appointment.time %></div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= appointment.appointmentType %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <%- statusBadge %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm">
                <%- notificationStatus %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                  <% if (!isAssigned) { %>
                    <button data-id="<%= appointment._id %>" data-action="assign" class="assign-btn text-purple-600 hover:text-purple-900">Assign to Me</button>
                  <% } else { %>
                    <button data-id="<%= appointment._id %>" data-status="confirmed" class="status-btn text-green-600 hover:text-green-900">Confirm</button>
                    <button data-id="<%= appointment._id %>" data-status="waiting" class="status-btn text-blue-600 hover:text-blue-900">Wait</button>
                    <button data-id="<%= appointment._id %>" data-status="rejected" class="status-btn text-red-600 hover:text-red-900">Reject</button>
                    <% if (['confirmed', 'rejected', 'waiting'].includes(appointment.status) && 
                          !appointment.notificationsSent?.[appointment.status]) { %>
                      <button data-id="<%= appointment._id %>" data-action="resend" class="resend-btn text-purple-600 hover:text-purple-900 ml-2">Resend</button>
                    <% } %>
                  <% } %>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
  
  <script>
    // Add event listeners to all status buttons
    document.querySelectorAll('.status-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const id = this.getAttribute('data-id');
        const status = this.getAttribute('data-status');
        
        try {
          const response = await fetch(`/api/appointments/${id}/status`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status })
          });
          
          if (response.ok) {
            // Refresh the page to see the updated status
            window.location.reload();
          } else {
            const data = await response.json();
            alert(data.message || 'Failed to update status. Please try again.');
          }
        } catch (error) {
          console.error('Error updating status:', error);
          alert('An error occurred. Please try again.');
        }
      });
    });
    
    // Add event listeners for assignment buttons
    document.querySelectorAll('.assign-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const id = this.getAttribute('data-id');
        
        try {
          const response = await fetch(`/api/appointments/${id}/assign`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const data = await response.json();
            alert(data.message || 'Failed to assign appointment. Please try again.');
          }
        } catch (error) {
          console.error('Error assigning appointment:', error);
          alert('An error occurred. Please try again.');
        }
      });
    });
    
    // Add event listeners for resend buttons
    document.querySelectorAll('.resend-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const id = this.getAttribute('data-id');
        
        try {
          const response = await fetch(`/api/appointments/${id}/resend-notification`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            alert('SMS notification resent successfully');
            window.location.reload();
          } else {
            alert('Failed to resend notification. Please try again.');
          }
        } catch (error) {
          console.error('Error resending notification:', error);
          alert('An error occurred. Please try again.');
        }
      });
    });
  </script>
</body>
</html>